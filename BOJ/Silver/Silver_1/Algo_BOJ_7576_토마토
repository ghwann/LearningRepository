import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	private static int M, N, day;
	private static int[][] box;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		box = new int[N][M];
		
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for (int j = 0; j < M; j++) {
				box[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		bfs();
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (box[i][j] == 0) {
					System.out.println(-1);
					System.exit(0);
				}
			}
		}
		System.out.println(day);
	}	// end of main

	private static int[] dr = {-1, 1, 0, 0};	// 상, 하, 좌, 우
	private static int[] dc = {0, 0, -1, 1};
	private static void bfs() {
		Queue<Loc> q = new LinkedList<Loc>();
		Loc l = null;
		for (int n = 0; n < N; n++) {
			for (int m = 0; m < M; m++) {
				if (box[n][m] == 1) {
					l = new Loc(n, m, 0);
					q.offer(l);
					box[n][m] = 9;
				}
			}
		}
		
		while (!q.isEmpty()) {
			l = q.poll();
			int r = l.x;
			int c = l.y;
			int count = l.cnt;
			
			for (int k = 0; k < dr.length; k++) {
				int nr = r + dr[k];
				int nc = c + dc[k];
				
				if (0 <= nr && nr < N && 0 <= nc && nc < M && box[nr][nc] == 0) {
					q.offer(new Loc(nr, nc, count+1));
					box[nr][nc] = 9;
				}
			}
			
			day = count;
		}
	}
	
	static class Loc {
		int x, y, cnt;

		public Loc(int x, int y, int cnt) {
			this.x = x;
			this.y = y;
			this.cnt = cnt;
		}
	}
}	// end of class

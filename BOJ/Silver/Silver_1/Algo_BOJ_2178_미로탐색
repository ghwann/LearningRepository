import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	private static int N, M, dist;
	private static int[][] map;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		
		String str = "";
		for (int i = 0; i < N; i++) {
			str = br.readLine();
			for (int j = 0; j < M; j++) {
				map[i][j] = str.charAt(j) - '0';
			}
		}
		
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if (map[i][j] == 1) {
					bfs(i, j);
				}
			}
		}
		
		System.out.println(dist);
	}	// end of main
	
	private static int[] dr = {-1, 1, 0, 0};
	private static int[] dc = {0, 0, -1, 1};
	private static void bfs(int i, int j) {
		Queue<Loc> q = new LinkedList<Loc>();
		Loc l = new Loc(i, j, 1);
		q.offer(l);
		map[i][j] = 0;
		
		while (!q.isEmpty()) {
			l = q.poll();
			int r = l.x;
			int c = l.y;
			int d = l.dist;
			
			if (r == N-1 && c == M-1) {
				dist = d;
				break;
			}
			
			for (int k = 0; k < dc.length; k++) {
				int nr = r + dr[k];
				int nc = c + dc[k];
				
				if (0 <= nr && nr < N && 0 <= nc && nc < M && map[nr][nc] == 1) {
					q.offer(new Loc(nr, nc, d+1));
					map[nr][nc] = 0;
				}
			}
		}
	}
	
	static class Loc {
		int x, y, dist;

		public Loc(int x, int y, int dist) {
			this.x = x;
			this.y = y;
			this.dist = dist;
		}
	}
}	// end of class

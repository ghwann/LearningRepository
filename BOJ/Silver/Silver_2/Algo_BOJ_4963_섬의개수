import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	private static int W, H, ans;
	private static int[][] map;
	private static boolean[][] visited;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		while (true) {
			st = new StringTokenizer(br.readLine(), " " );
			W = Integer.parseInt(st.nextToken());
			H = Integer.parseInt(st.nextToken());
			map = new int[H][W];
			visited = new boolean[H][W];
			ans = 0;
			
			if (W == 0 && H == 0) {
				break;
			}
			
			
			for (int i = 0; i < H; i++) {
				st = new StringTokenizer(br.readLine(), " " );
				for (int j = 0; j < W; j++) {
					map[i][j] = Integer.parseInt(st.nextToken()); 
				}
			}
			
			for (int i = 0; i < H; i++) {
				for (int j = 0; j < W; j++) {
					if (!visited[i][j] && map[i][j] == 1) {
						ans++;
						bfs(i, j);
					}
				}
			}
			
			System.out.println(ans);
		}	// end of while loop
	}	// end of main

	// 00 01 02
	// 10 11 12
	// 20 21 22
	private static int[] dr = {0, -1, -1, -1, 0, 1, 1, 1};	// 좌, 좌상, 상, 우상, 우, 우하, 하, 좌하
	private static int[] dc = {-1, -1, 0, 1, 1, 1, 0, -1};
	private static void bfs(int i, int j) {
		Queue<Loc> q = new LinkedList<Loc>();
		Loc l = new Loc(i, j);
		q.offer(l);
		visited[i][j] = true;
		
		while (!q.isEmpty()) {
			l = q.poll();
			int r = l.x;
			int c = l.y;
			
			for (int k = 0; k < dc.length; k++) {
				int nr = r + dr[k];
				int nc = c + dc[k];
				
				if (0 <= nr && nr < H && 0 <= nc && nc < W && !visited[nr][nc] && map[nr][nc] == 1) {
					q.offer(new Loc(nr, nc));
					visited[nr][nc] = true;
				}
			}
		}
	}
	
	static class Loc {
		int x, y;

		public Loc(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
}	// end of class

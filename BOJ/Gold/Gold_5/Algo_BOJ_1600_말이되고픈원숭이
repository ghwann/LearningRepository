import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.StringTokenizer;


public class Algo_BOJ_1600_말이되고픈원숭이 {
	public static class node{
		int y,x;
		int canMove;
		int cnt;
		public node(int y, int x, int canMove, int cnt ) {
			this.y = y;
			this.x = x;
			this.canMove = canMove;
			this.cnt = cnt;
			
		}
	}
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int k = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		int x  =Integer.parseInt(st.nextToken());
		int y  =Integer.parseInt(st.nextToken());
		int map[][] = new int[y][x];
		boolean visit[][][] = new boolean [k+1][y][x];
		
		for(int i = 0 ; i < y; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 0 ; j < x ; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		visit[k][0][0] = true;
		
		
		ArrayDeque<node> dq = new ArrayDeque<>();
		dq.add(new node(0, 0, k, 0 ));
		int answer = -1;
		// 원숭이의 이동 
		int dir_monkey[][] = {{1,0},{-1,0},{0,1},{0,-1}};
		// 말의 이동
		int dir_horse[][] = {{1,2},{2,1},{-1,2},{2,-1},{1,-2},{-2,1},{-1,-2},{-2,-1}};
		while(!dq.isEmpty()) {
			node now = dq.poll();
			int r = now.y;
			int c = now.x;
			int can = now.canMove;
			
			if(r== y-1 && c == x-1) {
				answer = now.cnt;
				break;
			}
			
			for(int i = 0 ; i < 4 ; i++) {
				int ny  = r + dir_monkey[i][0];
				int nx  = c + dir_monkey[i][1];
				if(ny >= 0 && nx>= 0 && ny < y && nx < x ) {
					if(map[ny][nx] ==0 && !visit[can][ny][nx]) {
						visit[can][ny][nx] = true;
						dq.add(new node(ny,nx,can,now.cnt+1 ));
					}
				}
			}
			
			if(can >0) {
				for(int i = 0 ; i < 8 ; i++) {
					int ny  = r + dir_horse[i][0];
					int nx  = c + dir_horse[i][1];
					if(ny >= 0 && nx>= 0 && ny < y && nx < x ) {
						if(map[ny][nx] ==0 && !visit[can-1][ny][nx]) {
							visit[can-1][ny][nx] = true;
							dq.add(new node(ny,nx,can-1,now.cnt+1));
						}
					}
				}
			}
		}
		System.out.print(answer);
	}
}
